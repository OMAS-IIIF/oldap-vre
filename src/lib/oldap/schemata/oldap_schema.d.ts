/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/admin/auth/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Authentification/login
         * @description Perform login/logout with userid/password. Returns a JWT token.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        password?: string;
                    };
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Login succeeded */
                            message?: string;
                            /** @example exampletoken */
                            token?: string;
                        };
                    };
                };
                /** @description Several Errors that involve bad requests */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Invalid content type, JSON required */
                            message?: string;
                        };
                    };
                };
                /** @description Unauthorized */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Connection failed: Wrong credentials */
                            message?: string;
                        };
                    };
                };
                /** @description User not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example User {userId} not found */
                            message?: string;
                        };
                    };
                };
            };
        };
        /**
         * Logout
         * @description Logout from system
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Several Errors that involve bad requests */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server error. Should not be reachable */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user info
         * @description Get all information about a user
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            userIri?: string;
                            userId?: string;
                            family_name?: string;
                            given_name?: string;
                            is_active?: boolean;
                            in_projects?: {
                                project?: string;
                                permissions?: string[];
                            }[];
                            has_permissions?: string[];
                        };
                    };
                };
                /** @description Unauthorized */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Connection failed: {OldapError} */
                            message?: string;
                        };
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example User {userId} not found */
                            message?: string;
                        };
                    };
                };
            };
        };
        /**
         * Create a new user
         * @description Create a new user with the given data
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        givenName: string;
                        familyName: string;
                        password: string;
                        isActive?: boolean;
                        userIri?: string;
                        /** @description The project field is the QName of the project, the permissions is a sets of admin permissions. */
                        inProjects?: {
                            project?: string;
                            permissions?: ("ADMIN_OLDAP" | "ADMIN_USERS" | "ADMIN_PERMISSION_SETS" | "ADMIN_RESOURCES" | "ADMIN_MODEL" | "ADMIN_CREATE")[];
                        }[];
                        /** @description Lust be a list of QNames of the permission sets. */
                        hasPermissions?: string[];
                    };
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example User {userid} created */
                            message?: string;
                            /** @example {userIri} */
                            userIri?: string;
                        };
                    };
                };
                /** @description Several Errors that involve bad requests */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Missing field {field_name}//JSON expected. Instead received {request.content_type}//The given projectname is not a valid anyIri */
                            message?: string;
                        };
                    };
                };
                /** @description Connection failed */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Connection failed: {OldapError} */
                            message?: string;
                        };
                    };
                };
                /** @description Userid or useriri already exists */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example A user with a user ID {userId} already exists */
                            message?: string;
                        };
                    };
                };
                /** @description Internal Server error. Should not be reachable */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /**
         * Modify a user
         * @description Modify value(s) of a user definition.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        givenName?: string;
                        familyName?: string;
                        password?: string;
                        isActive?: boolean;
                        inProjects?: {
                            project?: string;
                            permissions?: string[] | {
                                add?: string[];
                                del?: string[];
                            };
                        }[];
                        hasPermissions?: string[] | {
                            add?: string[];
                            del?: string[];
                        };
                    };
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example User {userid} created, 'userIri': '{userid}' */
                            message?: string;
                        };
                    };
                };
                /** @description Several Errors that involve bad requests */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example JSON expected. Instead received {request.content_type} */
                            message?: string;
                        };
                    };
                };
                /** @description Unauthorized */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Connection failed: {OldapError} */
                            message?: string;
                        };
                    };
                };
                /** @description Userid not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example A user with a user ID '{userId}' already exists */
                            message?: string;
                        };
                    };
                };
                /** @description Internal Server error. Should not be reachable */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /**
         * Delete a user
         * @description The user that has the rights (given by his token) deletes another user
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example User {userid} deleted */
                            message?: string;
                        };
                    };
                };
                /** @description Unauthorized */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Connection failed: {OldapError}//Actor has no ADMIN_USERS permission for project {proj} */
                            message?: string;
                        };
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example User {userId} not found */
                            message?: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/project/{projectId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets/reads Information about a project
         * @description The user that has the rights (given by his token) gets Information about a project
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            project?: string;
                            creation?: string;
                            modified?: string;
                            label?: components["schemas"]["LangString"];
                            comment?: components["schemas"]["LangString"];
                            message?: string;
                            shortName?: string;
                            "namespace IRI"?: string;
                            "project start"?: string;
                            "project end"?: string;
                        };
                    };
                };
                /** @description Unauthorized */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Connection failed: {OldapError} */
                            message?: string;
                        };
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Project with IRI/shortname "projectdoesnotexist" not found. */
                            message?: string;
                        };
                    };
                };
            };
        };
        /**
         * Project creation
         * @description Creates a new project in the database
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        projectIri?: string;
                        label?: components["schemas"]["LangString"];
                        comment?: components["schemas"]["LangString"];
                        namespaceIri?: string;
                        projectStart?: string;
                        projectEnd?: string;
                    };
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Project successfully created */
                            message?: string;
                        };
                    };
                };
                /** @description Several Errors that involve bad requests */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Invalid content type, JSON required//A meaningful label and comment need to be provided and can not be empty (...) */
                            message?: string;
                        };
                    };
                };
                /** @description Unauthorized */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example No permission to create a new project.//Connection failed: {str(error)} */
                            message?: string;
                        };
                    };
                };
                /** @description Unauthorized */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example A Project with a projectIri "http://unittest.org/project/testproject" already exists */
                            message?: string;
                        };
                    };
                };
                /** @description Internal Server error. Should not be reachable */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                        };
                    };
                };
            };
        };
        /**
         * Modify/updates a project
         * @description The user that has the rights (given by his token) modifies a project
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        label?: components["schemas"]["LangString"] | {
                            add?: components["schemas"]["LangString"];
                            del?: components["schemas"]["LangString"];
                        };
                        comment?: components["schemas"]["LangString"] | {
                            add?: components["schemas"]["LangString"];
                            del?: components["schemas"]["LangString"];
                        };
                        projectStart?: string;
                        projectEnd?: string;
                    };
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Project updated successfully */
                            message?: string;
                        };
                    };
                };
                /** @description Several Errors that involve bad requests */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example JSON expected. Instead received {request.content_type} */
                            message?: string;
                        };
                    };
                };
                /** @description Unauthorized */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example projectShortName, projectIri and namespaceIri must not be modified//Connection failed: {str(error)}//No permission to create a new project. */
                            message?: string;
                        };
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Project with IRI/shortname "notexistingproject" not found. */
                            message?: string;
                        };
                    };
                };
                /** @description Internal Server error. Should not be reachable */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                        };
                    };
                };
            };
        };
        /**
         * Delete a project
         * @description The user that has the rights (given by his token) deletes a project
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Project successfully deleted */
                            message?: string;
                        };
                    };
                };
                /** @description Unauthorized */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Connection failed: {OldapError}//No permission to delete project {project}. */
                            message?: string;
                        };
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Project with IRI/shortname "nonexistingproject" not found. */
                            message?: string;
                        };
                    };
                };
                /** @description Internal Server error. Should not be reachable */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/project/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Searches for given parameters
         * @description The user that has the rights (given by his token) searches for given parameters in projects
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        label?: string;
                        comment?: string;
                    };
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example [Iri("http://unittest.org/project/testproject")] */
                            message?: string;
                        };
                    };
                };
                /** @description Several Errors that involve bad requests */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Expected JSON, received something else//Either label or comment needs to be provided */
                            message?: string;
                        };
                    };
                };
                /** @description Unauthorized */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Connection failed: {OldapError} */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/permissionset/{definedByProject}/{permissionsetid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets/reads Information about a permissionset
         * @description The user that has the rights (given by his token) gets Information about a permissionset
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The project that defines this permission set (either the IRI or the shortname) */
                    definedByProject: string;
                    /** @description A unique identifier for the permission set (unique within the project as given by :definedByProject) */
                    permissionsetid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            permisionsetid?: string;
                            creation?: string;
                            contributor?: string;
                            modified?: string;
                            label?: components["schemas"]["LangString"];
                            comment?: components["schemas"]["LangString"];
                            givesPermission?: string;
                            definedByProject?: string;
                        };
                    };
                };
                /** @description Unauthorized */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Connection failed: {OldapError} */
                            message?: string;
                        };
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example No permission set "oldap:doesnotexist" */
                            message?: string;
                        };
                    };
                };
            };
        };
        /**
         * Permissionset creation
         * @description Creates a new permissionset in the database
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The project that defines this permission set (either the IRI or the shortname) */
                    definedByProject: string;
                    /** @description A unique identifier for the permission set (unique within the project as given by :definedByProject) */
                    permissionsetid: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        label?: components["schemas"]["LangString"];
                        comment?: components["schemas"]["LangString"];
                        /** @enum {string} */
                        givesPermission?: "DATA_RESTRICTED" | "DATA_VIEW" | "DATA_EXTEND" | "DATA_UPDATE" | "DATA_DELETE" | "DATA_PERMISSIONS";
                    };
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Permissionset successfully created */
                            message?: string;
                        };
                    };
                };
                /** @description Several Errors that involve bad requests */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example JSON expected. Instead received {request.content_type}//The Field/s {unknown_json_field} is/are not used to create a permissionset. Usable are {known_json_fields}. Aborded operation// (...) */
                            message?: string;
                        };
                    };
                };
                /** @description Unauthorized */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example No permission to create a new project.//Connection failed: {str(error)} */
                            message?: string;
                        };
                    };
                };
                /** @description Unauthorized */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example A permission set "oldap:testpermissionset" already exists */
                            message?: string;
                        };
                    };
                };
                /** @description Internal Server error. Should not be reachable */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                        };
                    };
                };
            };
        };
        /**
         * Modify/updates a permissionset
         * @description The user that has the rights (given by his token) modifies a permissionset
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The project that defines this permission set (either the IRI or the shortname) */
                    definedByProject: string;
                    /** @description A unique identifier for the permission set (unique within the project as given by :definedByProject) */
                    permissionsetid: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        label?: components["schemas"]["LangString"] | {
                            add?: components["schemas"]["LangString"];
                            del?: components["schemas"]["LangString"];
                        };
                        comment?: components["schemas"]["LangString"] | {
                            add?: components["schemas"]["LangString"];
                            del?: components["schemas"]["LangString"];
                        };
                        givesPermission?: string[] | {
                            add?: ("DATA_RESTRICTED" | "DATA_VIEW" | "DATA_EXTEND" | "DATA_UPDATE" | "DATA_DELETE" | "DATA_PERMISSIONS")[];
                            del?: ("DATA_RESTRICTED" | "DATA_VIEW" | "DATA_EXTEND" | "DATA_UPDATE" | "DATA_DELETE" | "DATA_PERMISSIONS")[][];
                        };
                    };
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Permissionset updated successfully */
                            message?: string;
                        };
                    };
                };
                /** @description Several Errors that involve bad requests */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example JSON expected. Instead received {request.content_type}//For the label either a list or a dict is expected, not a string//(...) */
                            message?: string;
                        };
                    };
                };
                /** @description Unauthorized */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Connection failed: {str(error)}//Actor has no ADMIN_PERMISSION_SETS permission for project oldap:SystemProject */
                            message?: string;
                        };
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example No permission set "oldap:notexistingproject" */
                            message?: string;
                        };
                    };
                };
                /** @description Internal Server error. Should not be reachable */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                        };
                    };
                };
            };
        };
        /**
         * Delete a permissionset
         * @description The user that has the rights (given by his token) deletes a permissionset
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The project that defines this permission set (either the IRI or the shortname) */
                    definedByProject: string;
                    /** @description A unique identifier for the permission set (unique within the project as given by :definedByProject) */
                    permissionsetid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Permissionset successfully deleted */
                            message?: string;
                        };
                    };
                };
                /** @description Unauthorized */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Connection failed: {OldapError}//Actor has no ADMIN_PERMISSION_SETS permission for project oldap:SystemProject */
                            message?: string;
                        };
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example No permission set "oldap:nonexistingproject" */
                            message?: string;
                        };
                    };
                };
                /** @description Internal Server error. Should not be reachable */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/permissionset/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Searches for given parameters
         * @description The user that has the rights (given by his token) searches for given parameters in permissionsets
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        label?: string;
                        definedByProject?: string;
                        givesPermission?: string;
                    };
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example [Iri("oldap:testpermissionset")] */
                            message?: string;
                        };
                    };
                };
                /** @description Several Errors that involve bad requests */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Expected JSON, received something else//The Field/s {unknown_json_field} is/are not used to search for a permissionset. Usable are {known_json_fields}. Aborded operation//(...) */
                            message?: string;
                        };
                    };
                };
                /** @description Unauthorized */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Connection failed: {OldapError} */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/datamodel/{project}/ressource": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Creates a complete ressource
         * @description Creates a new ressource in the database
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The project-iri where the new ressource is created */
                    project: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description The iri of this ressource
                         * @example my:Sheep
                         */
                        iri: string;
                        /**
                         * @description The iri of the superclass
                         * @example my:Animal
                         */
                        superclass?: string;
                        label?: components["schemas"]["LangString"];
                        comment?: components["schemas"]["LangString"];
                        closed?: boolean;
                        hasProperty?: [
                            {
                                property?: {
                                    /** @example myproj:pageOf */
                                    iri?: string;
                                    /**
                                     * @description Iri() of the the Superclass.  ; partOf is generic case of pageOf
                                     * @example myproj:partOf
                                     */
                                    subpropertyOf?: string;
                                    /**
                                     * @description An Iri(). Describes the class of the instance that this property must point to. E.g. "myproj:Book" means that the property must point to a book
                                     * @example myproj:Book
                                     */
                                    toClass?: string;
                                    /**
                                     * @description Datatype when the property is represented by a literal
                                     * @example xsd:string or xsd:integer etc.
                                     */
                                    datatype?: string;
                                    /**
                                     * @description Human readable Name. Is a LangString ["Seite@de", Page@fr", "Page@en"]
                                     * @example [
                                     *       "Seite@de",
                                     *       "Page@fr",
                                     *       "Page@en"
                                     *     ]
                                     */
                                    name?: string;
                                    /**
                                     * @description Description as Langstring.
                                     * @example [
                                     *       "Eine Buchseite@de",
                                     *       "A page of a book@en"
                                     *     ]
                                     */
                                    description?: components["schemas"]["LangString"];
                                    /**
                                     * @description Available languages for this property
                                     * @example [
                                     *       "en",
                                     *       "fr",
                                     *       "it",
                                     *       "de"
                                     *     ]
                                     */
                                    languageIn?: string;
                                    /** @description Each language must be present only once True/False. Only matters if property itself is a Langstring datatype */
                                    uniqueLang?: boolean;
                                    /**
                                     * @description The set of possible things it could be.
                                     * @example [
                                     *       "Renault",
                                     *       "Opel",
                                     *       "BMW",
                                     *       "Mercedes"
                                     *     ]
                                     */
                                    in?: unknown[];
                                    /**
                                     * @description The minimal length of the string. Only when the property is either a xsd:string or rdf:langString
                                     * @example 5
                                     */
                                    minLength?: number;
                                    /**
                                     * @description The maximal length of the string. Only when the property is either a xsd:string or rdf:langString
                                     * @example 20
                                     */
                                    maxLength?: number;
                                    /** @description Contains the regex that the string must follow. Only when the property is either a xsd:string or rdf:langString */
                                    pattern?: string;
                                    /** @description Minimal value (exclusive) for a numerical datatype of the property */
                                    minExclusive?: number | string;
                                    /** @description Minimal value (inclusive) for a numerical datatype of the property */
                                    minInclusive?: number | string;
                                    /** @description Maximal value (exclusive) for a numerical datatype of the property */
                                    maxExclusive?: number | string;
                                    /** @description Maximal value (inclusive) for a numerical datatype of the property */
                                    maxInclusive?: number | string;
                                    /**
                                     * @description The (numerical) value must be smaller than the value that is given in the Property - referenced by the given IRI. Iri("myproj:deathDate")
                                     * @example myproj:deathDate
                                     */
                                    lessThan?: string;
                                    /**
                                     * @description The (numerical) value must be smaller or equal than the value that is given in the Property - referenced by the given IRI. Iri("myproj:deathDate")
                                     * @example myproj:deathDate
                                     */
                                    lessThanOrEquals?: string;
                                } | string;
                                maxCount?: number;
                                minCount?: number;
                                order?: number;
                            }
                        ];
                    };
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Permissionset successfully created */
                            message?: string;
                        };
                    };
                };
                /** @description Several Errors that involve bad requests */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example JSON expected. Instead received {request.content_type}//The Field/s {unknown_json_field} is/are not used to create a permissionset. Usable are {known_json_fields}. Aborded operation// (...) */
                            message?: string;
                        };
                    };
                };
                /** @description Unauthorized */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example No permission to create a new project.//Connection failed: {str(error)} */
                            message?: string;
                        };
                    };
                };
                /** @description Unauthorized */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example A permission set "oldap:testpermissionset" already exists */
                            message?: string;
                        };
                    };
                };
                /** @description Internal Server error. Should not be reachable */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                        };
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        user_get_body_200: {
            userIri?: string;
            userId?: string;
            family_name?: string;
            given_name?: string;
            in_projects?: {
                project?: string;
                permissions?: string[];
            }[];
            has_permissions?: string[];
        };
        user_get_body_401: {
            /** @example Connection failed: {OldapError} */
            message?: string;
        };
        admin_project_body: {
            projectIri?: string;
            projectShortName?: string;
            label?: string;
            comment?: string;
            namespaceIri?: string;
            projectStart?: string;
            projectEnd?: string;
        };
        project_response_200: {
            message?: string;
        };
        admin_auth_body: {
            password: string;
        };
        auth_response_200: {
            token?: string;
        };
        /** @description if no JSON is sent */
        auth_response_400: {
            /** @example Invalid content type, JSON required */
            message?: string;
        };
        /** @description If connection to server fails due to incorrect token */
        auth_response_401: {
            /** @example {OldapError} */
            message?: string;
        };
        /** @description if user not found */
        auth_response_404: {
            /** @example User {userId} not found */
            message?: string;
        };
        new_user: {
            givenName: string;
            familyName: string;
            password: string;
            isActive?: boolean;
            userIri?: string;
            /** @description The project field is the QName of the project, the permissions is a sets of admin permissions. */
            inProjects?: {
                project?: string;
                permissions?: ("ADMIN_OLDAP" | "ADMIN_USERS" | "ADMIN_PERMISSION_SETS" | "ADMIN_RESOURCES" | "ADMIN_MODEL" | "ADMIN_CREATE")[];
            }[];
            /** @description Lust be a list of QNames of the permission sets. */
            hasPermissions?: string[];
        };
        mod_user: {
            givenName?: string;
            familyName?: string;
            password?: string;
            inProjects?: {
                project?: string;
                permissions?: string[];
            }[];
            hasPermissions?: string[];
        };
        LangString: string[] | string;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
